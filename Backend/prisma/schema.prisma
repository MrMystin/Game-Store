generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id           Int           @id @default(autoincrement())
  fullName     String        @db.VarChar(256)
  username     String        @unique @db.VarChar(16)
  email        String        @unique
  password     String        @db.VarChar(256)
  cpf          String        @unique @db.VarChar(11)
  registerDate DateTime      @default(now())
  transaction  transaction[]
}

model product {
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar(256)
  value            Decimal
  description      String            @db.TinyText
  indicativeRating indicativeRating  @default(rL)
  rating           Float
  releaseDate      DateTime
  file             String
  fileSize         Float
  discount         Int?
  discountUntil    DateTime?
  workOn           String

  photos           photos[]
  languages        productLanguage[]
  goodies          goodies[]
  gameFeatures     gameFeature[]
  timeToBeats      timeToBeat[]
  requirements     productRequirements?
  transactionItem  transactionItem[]

  genres           Genre[]           @relation("ProductGenres")
  tags             Tag[]             @relation("ProductTags")
  company          Company           @relation(fields: [companyId], references: [id])
  companyId        Int
  publisher        Publisher         @relation(fields: [publisherId], references: [id])
  publisherId      Int
}

model Genre {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products product[] @relation("ProductGenres")
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products product[] @relation("ProductTags")
}

model Company {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products product[]
}

model Publisher {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products product[]
}

model photos {
  id        Int       @id @default(autoincrement())
  productId Int
  photo     String
  type      photoType
  product   product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model productLanguage {
  id        Int       @id @default(autoincrement())
  language  String    @db.VarChar(64)
  audio     Boolean
  text      Boolean
  productId Int
  product   product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model goodies {
  id        Int       @id @default(autoincrement())
  text      String
  productId Int
  product   product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model gameFeature {
  id        Int       @id @default(autoincrement())
  name      String
  productId Int
  product   product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model timeToBeat {
  id        Int     @id @default(autoincrement())
  value     Float
  productId Int
  product   product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model productRequirements {
  id        Int         @id @default(autoincrement())
  productId Int         @unique
  windows   requirement @relation("WindowsRequirement", fields: [windowsId], references: [id])
  mac       requirement @relation("MacRequirement", fields: [macId], references: [id])
  linux     requirement @relation("LinuxRequirement", fields: [linuxId], references: [id])

  windowsId Int
  macId     Int
  linuxId   Int

  product   product     @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model requirement {
  id        Int    @id @default(autoincrement())
  OS        String @db.VarChar(32)
  processor String @db.VarChar(32)
  memory    Int
  graphics  String @db.VarChar(32)
  directX   Int
  storage   Int

  windowsOf productRequirements[] @relation("WindowsRequirement")
  macOf     productRequirements[] @relation("MacRequirement")
  linuxOf   productRequirements[] @relation("LinuxRequirement")
}

model transaction {
  id               Int                 @id @default(autoincrement())
  invoiceId        String              @unique @db.VarChar(32)
  orderId          String              @unique @db.VarChar(32)
  userId           Int
  paymentType      paymentType
  transactionDate  DateTime            @default(now())
  total            Decimal

  user             user                @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactionItems transactionItem[]
}

model transactionItem {
  id             Int       @id @default(autoincrement())
  transactionId  Int
  productId      Int
  productValue   Decimal
  discount       Decimal   @default(0)

  transaction    transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  product        product     @relation(fields: [productId], references: [id])
}


enum photoType {
  banner
  thumbnail
  photos
  descriptionPhoto
}

enum paymentType {
  credit_card
  debit_card
  pix
}

enum indicativeRating {
  rL
  r10
  r12
  r14
  r16
  r18
}